pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "your-docker-registry"
        DOCKER_CREDENTIALS_ID = "docker-credentials-id"
        KUBE_CONFIG = credentials('kubeconfig')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/yourusername/ai-assistant.git'
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['nlp-agent', 'routine-detection-agent', 'security-privacy-agent', 'feedback-improvement-agent', 'proactive-assistance-agent', 'task-management-agent']
                    for (service in services) {
                        docker.build("${DOCKER_REGISTRY}/${service}:latest", "./services/${service}")
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS_ID}") {
                        def services = ['nlp-agent', 'routine-detection-agent', 'security-privacy-agent', 'feedback-improvement-agent', 'proactive-assistance-agent', 'task-management-agent']
                        for (service in services) {
                            docker.image("${DOCKER_REGISTRY}/${service}:latest").push()
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        def services = ['nlp-agent', 'routine-detection-agent', 'security-privacy-agent', 'feedback-improvement-agent', 'proactive-assistance-agent', 'task-management-agent']
                        for (service in services) {
                            sh "helm upgrade --install ${service} ./charts/${service} --set image.repository=${DOCKER_REGISTRY}/${service} --set image.tag=latest"
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    def services = ['nlp-agent', 'routine-detection-agent', 'security-privacy-agent', 'feedback-improvement-agent', 'proactive-assistance-agent', 'task-management-agent']
                    for (service in services) {
                        sh "docker run --rm ${DOCKER_REGISTRY}/${service}:latest pytest services/${service}/tests"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment and testing completed successfully.'
        }
        failure {
            echo 'Deployment or testing failed. Check the logs for details.'
        }
    }
}
